<template>
  <div>
      <div v-if="isLoading.value" class="d-flex justify-content-center my-5">
        <div class="spinner-border text-primary" role="status">
          <span class="visually-hidden">Loading...</span>
        </div>
      </div>
      <ul v-else>
      <li v-for="car in displayedCars" :key="car.id" @mouseleave="closeComments(car.id), closeMap(car.id)">
          <p>{{ car.username }}</p>
          <p>{{ car.make }}</p>
          <p>{{ car.model }}</p>
          <p>{{ car.engine }}</p>
          <p>{{ car.color }}</p>
      </li>
      </ul>
  </div>
</template>

<script>
    import { reactive, watch } from 'vue';
    import { initializeApp } from "firebase/app";
    import { getAuth } from 'firebase/auth';
    import { getFirestore, query as dbQuery, where, collection, addDoc, deleteDoc, getDocs, orderBy, serverTimestamp, doc, limit } from 'firebase/firestore';
    import { getStorage, ref, getDownloadURL } from 'firebase/storage';
    import firebaseConfig from "../firebaseConfig";
    import { db } from '../main'; 
    import "leaflet/dist/leaflet.css";
    import L from "leaflet";

    
    export default {
      setup() {
        const cars = reactive([]);
        const carComment = reactive({});
        const comments = reactive([]);
        const auth = getAuth()
        const uid = auth.currentUser.uid
        const isLoading = reactive({ value: true });

        const displayedCars = reactive([]);
        let page = 1;
        let pageSize = 6;
      
        getDocs(dbQuery(collection(db, 'cars'), orderBy('createdAt', 'desc'), limit(6)))
        .then(async (querySnapshot2) => {
          for (const doc of querySnapshot2.docs) {
            const storage = getStorage();
            const refImage = ref(storage, 'cars/' + doc.id + '.jpg');
            const imageUrl = await getDownloadURL(refImage);
            const likesCount = await countLikes(doc.id);
            const commentsCount = await countComments(doc.id);
            
            // Check if liked
            const likesRef = collection(db, 'likes');
            const query = dbQuery(likesRef, where('uid', '==', uid), where('post_id', '==', doc.id));
            const existingLikes = await getDocs(query);
            const likeExists = existingLikes.docs.length > 0;
            
            cars.push({
              id: doc.id,
              likes: likesCount,
              comments: commentsCount,
              username: doc.data().username,
              make: doc.data().make,
              model: doc.data().model,
              engine: doc.data().engine,
              color: doc.data().color,
              imageUrl: imageUrl,
              location: doc.data().location,
              liked: likeExists 

            });
          }
          isLoading.value = false;
        });

        watch(cars, () => {
              displayedCars.splice(0, displayedCars.length, ...cars.slice(0, pageSize * page));
          });

          window.addEventListener('scroll', () => {
              if ((window.innerHeight + window.scrollY) >= document.body.offsetHeight) {
                isLoading.value = true;
                  page++;
                  displayedCars.splice(0, displayedCars.length, ...cars.slice(0, pageSize * page));
                  isLoading.value = false;
              }
          });
      
        return {
          displayedCars,
          isLoading
        };
      }   
    }
</script>

